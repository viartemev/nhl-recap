name: Pipeline

on:
  push:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  USERNAME: ${{ github.actor }}

jobs:
  lint:
    name: "Source code Lint/Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'
          check-latest: true

      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest

      - name: Run golint
        run: golint ./...

      - name: Run tests
        run: go test -race -vet=off ./...

  docker-tag-gen:
    name: "Generate Docker Tag"
    needs: lint
    outputs:
      docker_tag: ${{ steps.vars.outputs.docker_tag }}
    steps:
      - name: Set Tag var
        id: vars
        run: echo "docker_tag=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Preview Tag
        run: echo ${{ steps.vars.outputs.docker_tag }}

  docker-build-push:
    name: "Docker Build/Push image"
    needs: docker-tag-gen
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.docker-tag-gen.outputs.docker_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: "Deploy Docker Image"
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - name: Remote Docker Login
        run: |
          echo ${{ needs.docker-tag-gen.outputs.docker_tag }}